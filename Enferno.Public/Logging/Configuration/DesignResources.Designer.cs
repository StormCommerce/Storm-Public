//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Enferno.Public.Logging.Configuration {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DesignResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DesignResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Samples.TraceListeners.Configuration.DesignResources", typeof(DesignResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Log Files (*.log)|*.log|All Files|*.*.
        /// </summary>
        internal static string LogFileDialogFilter {
            get {
                return ResourceManager.GetString("LogFileDialogFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A logging target listener that writes log messages in an XML format to a series of text files. 
        ///The listener can start a new file at specified intervals, use a specified file naming pattern, and optionally overwrite existing files. 
        ///.
        /// </summary>
        internal static string RollingXmlTraceListenerDataDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rolling Xml Trace Listener.
        /// </summary>
        internal static string RollingXmlTraceListenerDataDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path and name of the disk file to write log message to. It can include environment variables such as %WINDIR%, %TEMP%, and %USERPROFILE%..
        /// </summary>
        internal static string RollingXmlTraceListenerDataFileNameDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataFileNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Name.
        /// </summary>
        internal static string RollingXmlTraceListenerDataFileNameDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataFileNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum severity of messages that will be sent to the logging target. 
        ///Valid values are All (the default), Off, Critical, Error, Warning, Information, Verbose, and Activity Tracing. 
        ///The behavior is for messages with the selected severity and all higher severities to be included. 
        ///For example, the Warning setting will allow warning, error, and critical messages to be written to the logging target..
        /// </summary>
        internal static string RollingXmlTraceListenerDataFilterDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataFilterDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Severity Filter.
        /// </summary>
        internal static string RollingXmlTraceListenerDataFilterDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataFilterDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fully qualified type name of the Listener..
        /// </summary>
        internal static string RollingXmlTraceListenerDataListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Listener Data Type.
        /// </summary>
        internal static string RollingXmlTraceListenerDataListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of log files to retain. When set to a numeric value, the listener will purge old files based on the file creation date when the number exceeds the specified value..
        /// </summary>
        internal static string RollingXmlTraceListenerDataMaxArchivedFilesDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataMaxArchivedFilesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max Archived Files.
        /// </summary>
        internal static string RollingXmlTraceListenerDataMaxArchivedFilesDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataMaxArchivedFilesDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the Rolling XML Trace Listener..
        /// </summary>
        internal static string RollingXmlTraceListenerDataNameDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name.
        /// </summary>
        internal static string RollingXmlTraceListenerDataNameDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataNameDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines what occurs to an existing file when it rolls over. 
        ///Increment means that the listener will create a new file using a name created by incrementing the timestamp. 
        ///Overwrite means that, if a value for the Timestamp Pattern is not specified, the existing file is overwritten..
        /// </summary>
        internal static string RollingXmlTraceListenerDataRollFileExistsBehaviorDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataRollFileExistsBehaviorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Exists Behavior.
        /// </summary>
        internal static string RollingXmlTraceListenerDataRollFileExistsBehaviorDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataRollFileExistsBehaviorDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines when the log file rolls over. The default is None. 
        ///Other options are intervals of Midnight, Minute, Hour, Day, Month, or Year. 
        ///If required, both a maximum file size and a roll interval can be specified..
        /// </summary>
        internal static string RollingXmlTraceListenerDataRollIntervalDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataRollIntervalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Roll Interval.
        /// </summary>
        internal static string RollingXmlTraceListenerDataRollIntervalDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataRollIntervalDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum size of the log file, in kilobytes, before it rolls over. If required, both a maximum file size and a roll interval can be specified..
        /// </summary>
        internal static string RollingXmlTraceListenerDataRollSizeKBDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataRollSizeKBDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Roll Size KB.
        /// </summary>
        internal static string RollingXmlTraceListenerDataRollSizeKBDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataRollSizeKBDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The date/time format used to create the suffix for the file name, such as &apos;yyyy-MM-dd&apos;..
        /// </summary>
        internal static string RollingXmlTraceListenerDataTimeStampPatternDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataTimeStampPatternDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timestamp Pattern.
        /// </summary>
        internal static string RollingXmlTraceListenerDataTimeStampPatternDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataTimeStampPatternDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Listeners that do not output to a Text Formatter use this property to determine which options, or elements, should be included in the trace output. 
        ///Possible values are: CallStack, DateTime, LogicalOperationStack, None, ProcessId, ThreadId, and Timestamp. 
        ///The default is None. This property is optional..
        /// </summary>
        internal static string RollingXmlTraceListenerDataTraceOutputOptionsDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataTraceOutputOptionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Trace Output Options.
        /// </summary>
        internal static string RollingXmlTraceListenerDataTraceOutputOptionsDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataTraceOutputOptionsDisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fully qualified type name of the Rolling XML Trace Listener..
        /// </summary>
        internal static string RollingXmlTraceListenerDataTypeNameDescription {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataTypeNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type.
        /// </summary>
        internal static string RollingXmlTraceListenerDataTypeNameDisplayName {
            get {
                return ResourceManager.GetString("RollingXmlTraceListenerDataTypeNameDisplayName", resourceCulture);
            }
        }
    }
}
